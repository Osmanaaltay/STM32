
I2C_Lcd_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ea4  08002ea4  00003ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ebc  08002ebc  00004018  2**0
                  CONTENTS
  4 .ARM          00000008  08002ebc  08002ebc  00003ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec4  08002ec4  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec4  08002ec4  00003ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ec8  08002ec8  00003ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002ecc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000018  08002ee4  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002ee4  000040d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af31  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a00  00000000  00000000  0000ef79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  00010980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007be  00000000  00000000  00011360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021637  00000000  00000000  00011b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3bf  00000000  00000000  00033155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cacc8  00000000  00000000  00041514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c1dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e4  00000000  00000000  0010c220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010eb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e8c 	.word	0x08002e8c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08002e8c 	.word	0x08002e8c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af02      	add	r7, sp, #8
 800050a:	6078      	str	r0, [r7, #4]
	if (backlight) {
 800050c:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <lcd1602_Send_init_Data+0x80>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d007      	beq.n	8000524 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	f043 0308 	orr.w	r3, r3, #8
 800051c:	b2da      	uxtb	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e006      	b.n	8000532 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	f023 0308 	bic.w	r3, r3, #8
 800052c:	b2da      	uxtb	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	b2da      	uxtb	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000540:	230a      	movs	r3, #10
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2301      	movs	r3, #1
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	214e      	movs	r1, #78	@ 0x4e
 800054a:	480f      	ldr	r0, [pc, #60]	@ (8000588 <lcd1602_Send_init_Data+0x84>)
 800054c:	f001 f86c 	bl	8001628 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000550:	2005      	movs	r0, #5
 8000552:	f000 fc53 	bl	8000dfc <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	f023 0304 	bic.w	r3, r3, #4
 800055e:	b2da      	uxtb	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
 8000564:	230a      	movs	r3, #10
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2301      	movs	r3, #1
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	214e      	movs	r1, #78	@ 0x4e
 800056e:	4806      	ldr	r0, [pc, #24]	@ (8000588 <lcd1602_Send_init_Data+0x84>)
 8000570:	f001 f85a 	bl	8001628 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000574:	2005      	movs	r0, #5
 8000576:	f000 fc41 	bl	8000dfc <HAL_Delay>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000
 8000588:	20000034 	.word	0x20000034

0800058c <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af02      	add	r7, sp, #8
 8000592:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8000594:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <lcd1602_Send_data+0x74>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d007      	beq.n	80005ac <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	e006      	b.n	80005ba <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f023 0308 	bic.w	r3, r3, #8
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 80005c8:	230a      	movs	r3, #10
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2301      	movs	r3, #1
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	214e      	movs	r1, #78	@ 0x4e
 80005d2:	480c      	ldr	r0, [pc, #48]	@ (8000604 <lcd1602_Send_data+0x78>)
 80005d4:	f001 f828 	bl	8001628 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	f023 0304 	bic.w	r3, r3, #4
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, Adress, Data, 1, 10);
 80005e6:	230a      	movs	r3, #10
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	214e      	movs	r1, #78	@ 0x4e
 80005f0:	4804      	ldr	r0, [pc, #16]	@ (8000604 <lcd1602_Send_data+0x78>)
 80005f2:	f001 f819 	bl	8001628 <HAL_I2C_Master_Transmit>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000
 8000604:	20000034 	.word	0x20000034

08000608 <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 800060e:	2330      	movs	r3, #48	@ 0x30
 8000610:	71fb      	strb	r3, [r7, #7]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8000612:	200f      	movs	r0, #15
 8000614:	f000 fbf2 	bl	8000dfc <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff72 	bl	8000504 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 8000620:	2005      	movs	r0, #5
 8000622:	f000 fbeb 	bl	8000dfc <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff6b 	bl	8000504 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fbe4 	bl	8000dfc <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ff64 	bl	8000504 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 800063c:	2320      	movs	r3, #32
 800063e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ff5e 	bl	8000504 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х11======*/
	tx_buffer = 0x20;
 8000648:	2320      	movs	r3, #32
 800064a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff58 	bl	8000504 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000654:	2380      	movs	r3, #128	@ 0x80
 8000656:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff52 	bl	8000504 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х11======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8000660:	2300      	movs	r3, #0
 8000662:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff4c 	bl	8000504 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 800066c:	2380      	movs	r3, #128	@ 0x80
 800066e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000670:	1dfb      	adds	r3, r7, #7
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff46 	bl	8000504 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 8000678:	2300      	movs	r3, #0
 800067a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff40 	bl	8000504 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8000684:	2310      	movs	r3, #16
 8000686:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff3a 	bl	8000504 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8000690:	2300      	movs	r3, #0
 8000692:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff34 	bl	8000504 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 800069c:	2330      	movs	r3, #48	@ 0x30
 800069e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff2e 	bl	8000504 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 80006a8:	2300      	movs	r3, #0
 80006aa:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff28 	bl	8000504 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 80006b4:	23c0      	movs	r3, #192	@ 0xc0
 80006b6:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff22 	bl	8000504 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	f023 030f 	bic.w	r3, r3, #15
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	f043 0309 	orr.w	r3, r3, #9
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 80006e6:	f107 030f 	add.w	r3, r7, #15
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff4e 	bl	800058c <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	f043 0309 	orr.w	r3, r3, #9
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000700:	f107 030f 	add.w	r3, r7, #15
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff41 	bl	800058c <lcd1602_Send_data>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8000712:	b580      	push	{r7, lr}
 8000714:	b084      	sub	sp, #16
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	e009      	b.n	8000734 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ffcd 	bl	80006c8 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fd65 	bl	8000204 <strlen>
 800073a:	4602      	mov	r2, r0
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	429a      	cmp	r2, r3
 8000740:	d8ee      	bhi.n	8000720 <lcd1602_Print_text+0xe>
	}
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d901      	bls.n	8000766 <lcd1602_SetCursor+0x1a>
		y = 3;
 8000762:	2303      	movs	r3, #3
 8000764:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b27      	cmp	r3, #39	@ 0x27
 800076a:	d901      	bls.n	8000770 <lcd1602_SetCursor+0x24>
		x = 39;
 800076c:	2327      	movs	r3, #39	@ 0x27
 800076e:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <lcd1602_SetCursor+0x2e>
		adr = x;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d102      	bne.n	8000786 <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	3340      	adds	r3, #64	@ 0x40
 8000784:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d102      	bne.n	8000792 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	3314      	adds	r3, #20
 8000790:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d102      	bne.n	800079e <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	3354      	adds	r3, #84	@ 0x54
 800079c:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80007a6:	b25b      	sxtb	r3, r3
 80007a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 80007b2:	f107 030e 	add.w	r3, r7, #14
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fee8 	bl	800058c <lcd1602_Send_data>

	command = (adr << 4);
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 80007c4:	f107 030e 	add.w	r3, r7, #14
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fedf 	bl	800058c <lcd1602_Send_data>

}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <lcd1602_Backlight>:

/*---------------------Функция включения/выключения подсветки--------------------*/
/// Булевая функция включения/выключения подсветки
/// \param state - состояние подсветки.
/// 1 - вкл. 0 - выкл.
void lcd1602_Backlight(bool state) {
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	if (state) {
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d003      	beq.n	80007f0 <lcd1602_Backlight+0x18>
		backlight = true;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <lcd1602_Backlight+0x2c>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
	} else {
		backlight = false;
	}
}
 80007ee:	e002      	b.n	80007f6 <lcd1602_Backlight+0x1e>
		backlight = false;
 80007f0:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <lcd1602_Backlight+0x2c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fa84 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f824 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 f8e8 	bl	80009e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000818:	f000 f8bc 	bl	8000994 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800081c:	f000 f88c 	bl	8000938 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000820:	2064      	movs	r0, #100	@ 0x64
 8000822:	f000 faeb 	bl	8000dfc <HAL_Delay>
  lcd1602_Init();
 8000826:	f7ff feef 	bl	8000608 <lcd1602_Init>
  lcd1602_Backlight(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff ffd4 	bl	80007d8 <lcd1602_Backlight>
  lcd1602_SetCursor(0,0);
 8000830:	2100      	movs	r1, #0
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff ff8a 	bl	800074c <lcd1602_SetCursor>
  lcd1602_Print_text(data);
 8000838:	4806      	ldr	r0, [pc, #24]	@ (8000854 <main+0x4c>)
 800083a:	f7ff ff6a 	bl	8000712 <lcd1602_Print_text>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800083e:	2120      	movs	r1, #32
 8000840:	4805      	ldr	r0, [pc, #20]	@ (8000858 <main+0x50>)
 8000842:	f000 fd92 	bl	800136a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000846:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800084a:	f000 fad7 	bl	8000dfc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800084e:	bf00      	nop
 8000850:	e7f5      	b.n	800083e <main+0x36>
 8000852:	bf00      	nop
 8000854:	20000004 	.word	0x20000004
 8000858:	40020000 	.word	0x40020000

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b094      	sub	sp, #80	@ 0x50
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2234      	movs	r2, #52	@ 0x34
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f002 fae2 	bl	8002e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b2a      	ldr	r3, [pc, #168]	@ (8000930 <SystemClock_Config+0xd4>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	4a29      	ldr	r2, [pc, #164]	@ (8000930 <SystemClock_Config+0xd4>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <SystemClock_Config+0xd4>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800089c:	2300      	movs	r3, #0
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <SystemClock_Config+0xd8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008a8:	4a22      	ldr	r2, [pc, #136]	@ (8000934 <SystemClock_Config+0xd8>)
 80008aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <SystemClock_Config+0xd8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008bc:	2302      	movs	r3, #2
 80008be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c0:	2301      	movs	r3, #1
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c4:	2310      	movs	r3, #16
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	2302      	movs	r3, #2
 80008ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d0:	2310      	movs	r3, #16
 80008d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008da:	2304      	movs	r3, #4
 80008dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fd40 	bl	8002370 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008f6:	f000 f8e5 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2302      	movs	r3, #2
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 f9e0 	bl	8001cdc <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000922:	f000 f8cf 	bl	8000ac4 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	@ 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <MX_I2C1_Init+0x50>)
 800093e:	4a13      	ldr	r2, [pc, #76]	@ (800098c <MX_I2C1_Init+0x54>)
 8000940:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000944:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <MX_I2C1_Init+0x58>)
 8000946:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000956:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800095a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800095c:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <MX_I2C1_Init+0x50>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	@ (8000988 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_I2C1_Init+0x50>)
 8000976:	f000 fd13 	bl	80013a0 <HAL_I2C_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000980:	f000 f8a0 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000034 	.word	0x20000034
 800098c:	40005400 	.word	0x40005400
 8000990:	000186a0 	.word	0x000186a0

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <MX_USART2_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009cc:	f001 ff6e 	bl	80028ac <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f875 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000088 	.word	0x20000088
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a25      	ldr	r2, [pc, #148]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a17      	ldr	r2, [pc, #92]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2120      	movs	r1, #32
 8000a72:	4812      	ldr	r0, [pc, #72]	@ (8000abc <MX_GPIO_Init+0xd4>)
 8000a74:	f000 fc60 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <MX_GPIO_Init+0xd8>)
 8000a90:	f000 fabe 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a94:	2320      	movs	r3, #32
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <MX_GPIO_Init+0xd4>)
 8000aac:	f000 fab0 	bl	8001010 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	@ 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 fa4a 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ba4 <HAL_I2C_MspInit+0x84>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12c      	bne.n	8000b9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b70:	2304      	movs	r3, #4
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480c      	ldr	r0, [pc, #48]	@ (8000bac <HAL_I2C_MspInit+0x8c>)
 8000b7c:	f000 fa48 	bl	8001010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <HAL_I2C_MspInit+0x88>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	@ 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020400 	.word	0x40020400

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <HAL_UART_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12b      	bne.n	8000c2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <HAL_UART_MspInit+0x88>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_UART_MspInit+0x88>)
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_UART_MspInit+0x88>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_UART_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <HAL_UART_MspInit+0x88>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_UART_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1a:	2307      	movs	r3, #7
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <HAL_UART_MspInit+0x8c>)
 8000c26:	f000 f9f3 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40004400 	.word	0x40004400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 f891 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc8:	f7ff ffea 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f002 f8a7 	bl	8002e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fd87 	bl	8000808 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d08:	08002ecc 	.word	0x08002ecc
  ldr r2, =_sbss
 8000d0c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d10:	200000d4 	.word	0x200000d4

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	@ (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	@ (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f931 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fec0 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f93b 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f911 	bl	8000fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	@ (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	20000014 	.word	0x20000014
 8000db8:	20000010 	.word	0x20000010

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000014 	.word	0x20000014
 8000de0:	200000d0 	.word	0x200000d0

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	@ (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200000d0 	.word	0x200000d0

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000014 	.word	0x20000014

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	@ (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	@ 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	@ 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f7ff ff8e 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff47 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff5c 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff8e 	bl	8000efc <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5d 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb0 	bl	8000f64 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	e165      	b.n	80012f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 8154 	bne.w	80012f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d005      	beq.n	8001062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	2b02      	cmp	r3, #2
 8001060:	d130      	bne.n	80010c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	f003 0201 	and.w	r2, r3, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d017      	beq.n	8001100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d123      	bne.n	8001154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	69b9      	ldr	r1, [r7, #24]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0203 	and.w	r2, r3, #3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80ae 	beq.w	80012f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b5d      	ldr	r3, [pc, #372]	@ (8001310 <HAL_GPIO_Init+0x300>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a5c      	ldr	r2, [pc, #368]	@ (8001310 <HAL_GPIO_Init+0x300>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001310 <HAL_GPIO_Init+0x300>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b2:	4a58      	ldr	r2, [pc, #352]	@ (8001314 <HAL_GPIO_Init+0x304>)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001318 <HAL_GPIO_Init+0x308>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d025      	beq.n	800122a <HAL_GPIO_Init+0x21a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4e      	ldr	r2, [pc, #312]	@ (800131c <HAL_GPIO_Init+0x30c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d01f      	beq.n	8001226 <HAL_GPIO_Init+0x216>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001320 <HAL_GPIO_Init+0x310>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_GPIO_Init+0x212>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001324 <HAL_GPIO_Init+0x314>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0x20e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001328 <HAL_GPIO_Init+0x318>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00d      	beq.n	800121a <HAL_GPIO_Init+0x20a>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4a      	ldr	r2, [pc, #296]	@ (800132c <HAL_GPIO_Init+0x31c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <HAL_GPIO_Init+0x206>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a49      	ldr	r2, [pc, #292]	@ (8001330 <HAL_GPIO_Init+0x320>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d101      	bne.n	8001212 <HAL_GPIO_Init+0x202>
 800120e:	2306      	movs	r3, #6
 8001210:	e00c      	b.n	800122c <HAL_GPIO_Init+0x21c>
 8001212:	2307      	movs	r3, #7
 8001214:	e00a      	b.n	800122c <HAL_GPIO_Init+0x21c>
 8001216:	2305      	movs	r3, #5
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x21c>
 800121a:	2304      	movs	r3, #4
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x21c>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x21c>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x21c>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x21c>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	@ (8001314 <HAL_GPIO_Init+0x304>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <HAL_GPIO_Init+0x324>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a31      	ldr	r2, [pc, #196]	@ (8001334 <HAL_GPIO_Init+0x324>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <HAL_GPIO_Init+0x324>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a26      	ldr	r2, [pc, #152]	@ (8001334 <HAL_GPIO_Init+0x324>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800129e:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <HAL_GPIO_Init+0x324>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001334 <HAL_GPIO_Init+0x324>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <HAL_GPIO_Init+0x324>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ec:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <HAL_GPIO_Init+0x324>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f ae96 	bls.w	800102c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	@ 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021800 	.word	0x40021800
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800137c:	887a      	ldrh	r2, [r7, #2]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4013      	ands	r3, r2
 8001382:	041a      	lsls	r2, r3, #16
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43d9      	mvns	r1, r3
 8001388:	887b      	ldrh	r3, [r7, #2]
 800138a:	400b      	ands	r3, r1
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e12b      	b.n	800160a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fbaa 	bl	8000b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2224      	movs	r2, #36	@ 0x24
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001402:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001404:	f000 fd5c 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8001408:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a81      	ldr	r2, [pc, #516]	@ (8001614 <HAL_I2C_Init+0x274>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d807      	bhi.n	8001424 <HAL_I2C_Init+0x84>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a80      	ldr	r2, [pc, #512]	@ (8001618 <HAL_I2C_Init+0x278>)
 8001418:	4293      	cmp	r3, r2
 800141a:	bf94      	ite	ls
 800141c:	2301      	movls	r3, #1
 800141e:	2300      	movhi	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	e006      	b.n	8001432 <HAL_I2C_Init+0x92>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a7d      	ldr	r2, [pc, #500]	@ (800161c <HAL_I2C_Init+0x27c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	bf94      	ite	ls
 800142c:	2301      	movls	r3, #1
 800142e:	2300      	movhi	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0e7      	b.n	800160a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4a78      	ldr	r2, [pc, #480]	@ (8001620 <HAL_I2C_Init+0x280>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0c9b      	lsrs	r3, r3, #18
 8001444:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	430a      	orrs	r2, r1
 8001458:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a6a      	ldr	r2, [pc, #424]	@ (8001614 <HAL_I2C_Init+0x274>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d802      	bhi.n	8001474 <HAL_I2C_Init+0xd4>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	3301      	adds	r3, #1
 8001472:	e009      	b.n	8001488 <HAL_I2C_Init+0xe8>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	4a69      	ldr	r2, [pc, #420]	@ (8001624 <HAL_I2C_Init+0x284>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	3301      	adds	r3, #1
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	430b      	orrs	r3, r1
 800148e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800149a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	495c      	ldr	r1, [pc, #368]	@ (8001614 <HAL_I2C_Init+0x274>)
 80014a4:	428b      	cmp	r3, r1
 80014a6:	d819      	bhi.n	80014dc <HAL_I2C_Init+0x13c>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e59      	subs	r1, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b6:	1c59      	adds	r1, r3, #1
 80014b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014bc:	400b      	ands	r3, r1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00a      	beq.n	80014d8 <HAL_I2C_Init+0x138>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1e59      	subs	r1, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d6:	e051      	b.n	800157c <HAL_I2C_Init+0x1dc>
 80014d8:	2304      	movs	r3, #4
 80014da:	e04f      	b.n	800157c <HAL_I2C_Init+0x1dc>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d111      	bne.n	8001508 <HAL_I2C_Init+0x168>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1e58      	subs	r0, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6859      	ldr	r1, [r3, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	440b      	add	r3, r1
 80014f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	e012      	b.n	800152e <HAL_I2C_Init+0x18e>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1e58      	subs	r0, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	0099      	lsls	r1, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	fbb0 f3f3 	udiv	r3, r0, r3
 800151e:	3301      	adds	r3, #1
 8001520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_Init+0x196>
 8001532:	2301      	movs	r3, #1
 8001534:	e022      	b.n	800157c <HAL_I2C_Init+0x1dc>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10e      	bne.n	800155c <HAL_I2C_Init+0x1bc>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1e58      	subs	r0, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6859      	ldr	r1, [r3, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	440b      	add	r3, r1
 800154c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001550:	3301      	adds	r3, #1
 8001552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001556:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800155a:	e00f      	b.n	800157c <HAL_I2C_Init+0x1dc>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e58      	subs	r0, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	0099      	lsls	r1, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001572:	3301      	adds	r3, #1
 8001574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001578:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	6809      	ldr	r1, [r1, #0]
 8001580:	4313      	orrs	r3, r2
 8001582:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69da      	ldr	r2, [r3, #28]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6911      	ldr	r1, [r2, #16]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68d2      	ldr	r2, [r2, #12]
 80015b6:	4311      	orrs	r1, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	430b      	orrs	r3, r1
 80015be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2220      	movs	r2, #32
 80015f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	000186a0 	.word	0x000186a0
 8001618:	001e847f 	.word	0x001e847f
 800161c:	003d08ff 	.word	0x003d08ff
 8001620:	431bde83 	.word	0x431bde83
 8001624:	10624dd3 	.word	0x10624dd3

08001628 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af02      	add	r7, sp, #8
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	461a      	mov	r2, r3
 8001634:	460b      	mov	r3, r1
 8001636:	817b      	strh	r3, [r7, #10]
 8001638:	4613      	mov	r3, r2
 800163a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff fbd2 	bl	8000de4 <HAL_GetTick>
 8001640:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b20      	cmp	r3, #32
 800164c:	f040 80e0 	bne.w	8001810 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2319      	movs	r3, #25
 8001656:	2201      	movs	r2, #1
 8001658:	4970      	ldr	r1, [pc, #448]	@ (800181c <HAL_I2C_Master_Transmit+0x1f4>)
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f964 	bl	8001928 <I2C_WaitOnFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001666:	2302      	movs	r3, #2
 8001668:	e0d3      	b.n	8001812 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_I2C_Master_Transmit+0x50>
 8001674:	2302      	movs	r3, #2
 8001676:	e0cc      	b.n	8001812 <HAL_I2C_Master_Transmit+0x1ea>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b01      	cmp	r3, #1
 800168c:	d007      	beq.n	800169e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0201 	orr.w	r2, r2, #1
 800169c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2221      	movs	r2, #33	@ 0x21
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2210      	movs	r2, #16
 80016ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	893a      	ldrh	r2, [r7, #8]
 80016ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4a50      	ldr	r2, [pc, #320]	@ (8001820 <HAL_I2C_Master_Transmit+0x1f8>)
 80016de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016e0:	8979      	ldrh	r1, [r7, #10]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	6a3a      	ldr	r2, [r7, #32]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f89c 	bl	8001824 <I2C_MasterRequestWrite>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e08d      	b.n	8001812 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800170c:	e066      	b.n	80017dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	6a39      	ldr	r1, [r7, #32]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 fa22 	bl	8001b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00d      	beq.n	800173a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	2b04      	cmp	r3, #4
 8001724:	d107      	bne.n	8001736 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001734:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e06b      	b.n	8001812 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001754:	b29b      	uxth	r3, r3
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001762:	3b01      	subs	r3, #1
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b04      	cmp	r3, #4
 8001776:	d11b      	bne.n	80017b0 <HAL_I2C_Master_Transmit+0x188>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d017      	beq.n	80017b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179a:	b29b      	uxth	r3, r3
 800179c:	3b01      	subs	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	6a39      	ldr	r1, [r7, #32]
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fa19 	bl	8001bec <I2C_WaitOnBTFFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00d      	beq.n	80017dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d107      	bne.n	80017d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e01a      	b.n	8001812 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d194      	bne.n	800170e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e000      	b.n	8001812 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001810:	2302      	movs	r3, #2
  }
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	00100002 	.word	0x00100002
 8001820:	ffff0000 	.word	0xffff0000

08001824 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	460b      	mov	r3, r1
 8001832:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001838:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b08      	cmp	r3, #8
 800183e:	d006      	beq.n	800184e <I2C_MasterRequestWrite+0x2a>
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d003      	beq.n	800184e <I2C_MasterRequestWrite+0x2a>
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800184c:	d108      	bne.n	8001860 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e00b      	b.n	8001878 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001864:	2b12      	cmp	r3, #18
 8001866:	d107      	bne.n	8001878 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001876:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f84f 	bl	8001928 <I2C_WaitOnFlagUntilTimeout>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00d      	beq.n	80018ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800189e:	d103      	bne.n	80018a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e035      	b.n	8001918 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018b4:	d108      	bne.n	80018c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018b6:	897b      	ldrh	r3, [r7, #10]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	e01b      	b.n	8001900 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018c8:	897b      	ldrh	r3, [r7, #10]
 80018ca:	11db      	asrs	r3, r3, #7
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f003 0306 	and.w	r3, r3, #6
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f063 030f 	orn	r3, r3, #15
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	490e      	ldr	r1, [pc, #56]	@ (8001920 <I2C_MasterRequestWrite+0xfc>)
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f898 	bl	8001a1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e010      	b.n	8001918 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018f6:	897b      	ldrh	r3, [r7, #10]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	4907      	ldr	r1, [pc, #28]	@ (8001924 <I2C_MasterRequestWrite+0x100>)
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f888 	bl	8001a1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	00010008 	.word	0x00010008
 8001924:	00010002 	.word	0x00010002

08001928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001938:	e048      	b.n	80019cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d044      	beq.n	80019cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001942:	f7ff fa4f 	bl	8000de4 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d302      	bcc.n	8001958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d139      	bne.n	80019cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d10d      	bne.n	800197e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	43da      	mvns	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4013      	ands	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	e00c      	b.n	8001998 <I2C_WaitOnFlagUntilTimeout+0x70>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	43da      	mvns	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	4013      	ands	r3, r2
 800198a:	b29b      	uxth	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	429a      	cmp	r2, r3
 800199c:	d116      	bne.n	80019cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f043 0220 	orr.w	r2, r3, #32
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e023      	b.n	8001a14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d10d      	bne.n	80019f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	43da      	mvns	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	4013      	ands	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	e00c      	b.n	8001a0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	43da      	mvns	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	4013      	ands	r3, r2
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d093      	beq.n	800193a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a2a:	e071      	b.n	8001b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a3a:	d123      	bne.n	8001a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f043 0204 	orr.w	r2, r3, #4
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e067      	b.n	8001b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8a:	d041      	beq.n	8001b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8c:	f7ff f9aa 	bl	8000de4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d302      	bcc.n	8001aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d136      	bne.n	8001b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	0c1b      	lsrs	r3, r3, #16
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d10c      	bne.n	8001ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bf14      	ite	ne
 8001abe:	2301      	movne	r3, #1
 8001ac0:	2300      	moveq	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	e00b      	b.n	8001ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	43da      	mvns	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d016      	beq.n	8001b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afc:	f043 0220 	orr.w	r2, r3, #32
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e021      	b.n	8001b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d10c      	bne.n	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	43da      	mvns	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	4013      	ands	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	e00b      	b.n	8001b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f47f af6d 	bne.w	8001a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b68:	e034      	b.n	8001bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f886 	bl	8001c7c <I2C_IsAcknowledgeFailed>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e034      	b.n	8001be4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d028      	beq.n	8001bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b82:	f7ff f92f 	bl	8000de4 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d302      	bcc.n	8001b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d11d      	bne.n	8001bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba2:	2b80      	cmp	r3, #128	@ 0x80
 8001ba4:	d016      	beq.n	8001bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e007      	b.n	8001be4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bde:	2b80      	cmp	r3, #128	@ 0x80
 8001be0:	d1c3      	bne.n	8001b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bf8:	e034      	b.n	8001c64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f83e 	bl	8001c7c <I2C_IsAcknowledgeFailed>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e034      	b.n	8001c74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d028      	beq.n	8001c64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c12:	f7ff f8e7 	bl	8000de4 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d302      	bcc.n	8001c28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d11d      	bne.n	8001c64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d016      	beq.n	8001c64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	f043 0220 	orr.w	r2, r3, #32
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e007      	b.n	8001c74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d1c3      	bne.n	8001bfa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c92:	d11b      	bne.n	8001ccc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	f043 0204 	orr.w	r2, r3, #4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0cc      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b68      	ldr	r3, [pc, #416]	@ (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d90c      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	4b65      	ldr	r3, [pc, #404]	@ (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b63      	ldr	r3, [pc, #396]	@ (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0b8      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d020      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d30:	4b59      	ldr	r3, [pc, #356]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a58      	ldr	r2, [pc, #352]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d48:	4b53      	ldr	r3, [pc, #332]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a52      	ldr	r2, [pc, #328]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b50      	ldr	r3, [pc, #320]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	494d      	ldr	r1, [pc, #308]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d044      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	4b47      	ldr	r3, [pc, #284]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d119      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e07f      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e06f      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001daa:	4b3b      	ldr	r3, [pc, #236]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e067      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dba:	4b37      	ldr	r3, [pc, #220]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 0203 	bic.w	r2, r3, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4934      	ldr	r1, [pc, #208]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dcc:	f7ff f80a 	bl	8000de4 <HAL_GetTick>
 8001dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7ff f806 	bl	8000de4 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e04f      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 020c 	and.w	r2, r3, #12
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d1eb      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d20c      	bcs.n	8001e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b20      	ldr	r3, [pc, #128]	@ (8001e94 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e032      	b.n	8001e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	4916      	ldr	r1, [pc, #88]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d009      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4e:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	490e      	ldr	r1, [pc, #56]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e62:	f000 f855 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	490a      	ldr	r1, [pc, #40]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	5ccb      	ldrb	r3, [r1, r3]
 8001e76:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe ff6a 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023c00 	.word	0x40023c00
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08002ea4 	.word	0x08002ea4
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	20000010 	.word	0x20000010

08001ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	2000000c 	.word	0x2000000c

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ec4:	f7ff fff0 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0a9b      	lsrs	r3, r3, #10
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4903      	ldr	r1, [pc, #12]	@ (8001ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	08002eb4 	.word	0x08002eb4

08001ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001eec:	f7ff ffdc 	bl	8001ea8 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	0b5b      	lsrs	r3, r3, #13
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4903      	ldr	r1, [pc, #12]	@ (8001f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	08002eb4 	.word	0x08002eb4

08001f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f14:	b0ae      	sub	sp, #184	@ 0xb8
 8001f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f36:	4bcb      	ldr	r3, [pc, #812]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	f200 8206 	bhi.w	8002350 <HAL_RCC_GetSysClockFreq+0x440>
 8001f44:	a201      	add	r2, pc, #4	@ (adr r2, 8001f4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4a:	bf00      	nop
 8001f4c:	08001f81 	.word	0x08001f81
 8001f50:	08002351 	.word	0x08002351
 8001f54:	08002351 	.word	0x08002351
 8001f58:	08002351 	.word	0x08002351
 8001f5c:	08001f89 	.word	0x08001f89
 8001f60:	08002351 	.word	0x08002351
 8001f64:	08002351 	.word	0x08002351
 8001f68:	08002351 	.word	0x08002351
 8001f6c:	08001f91 	.word	0x08001f91
 8001f70:	08002351 	.word	0x08002351
 8001f74:	08002351 	.word	0x08002351
 8001f78:	08002351 	.word	0x08002351
 8001f7c:	08002181 	.word	0x08002181
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f80:	4bb9      	ldr	r3, [pc, #740]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001f86:	e1e7      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f88:	4bb8      	ldr	r3, [pc, #736]	@ (800226c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f8e:	e1e3      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f90:	4bb4      	ldr	r3, [pc, #720]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9c:	4bb1      	ldr	r3, [pc, #708]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d071      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa8:	4bae      	ldr	r3, [pc, #696]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x354>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001fce:	4622      	mov	r2, r4
 8001fd0:	462b      	mov	r3, r5
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f04f 0100 	mov.w	r1, #0
 8001fda:	0159      	lsls	r1, r3, #5
 8001fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fe0:	0150      	lsls	r0, r2, #5
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	1a51      	subs	r1, r2, r1
 8001fea:	6439      	str	r1, [r7, #64]	@ 0x40
 8001fec:	4629      	mov	r1, r5
 8001fee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002000:	4649      	mov	r1, r9
 8002002:	018b      	lsls	r3, r1, #6
 8002004:	4641      	mov	r1, r8
 8002006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800200a:	4641      	mov	r1, r8
 800200c:	018a      	lsls	r2, r1, #6
 800200e:	4641      	mov	r1, r8
 8002010:	1a51      	subs	r1, r2, r1
 8002012:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002014:	4649      	mov	r1, r9
 8002016:	eb63 0301 	sbc.w	r3, r3, r1
 800201a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002028:	4649      	mov	r1, r9
 800202a:	00cb      	lsls	r3, r1, #3
 800202c:	4641      	mov	r1, r8
 800202e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002032:	4641      	mov	r1, r8
 8002034:	00ca      	lsls	r2, r1, #3
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	4603      	mov	r3, r0
 800203c:	4622      	mov	r2, r4
 800203e:	189b      	adds	r3, r3, r2
 8002040:	633b      	str	r3, [r7, #48]	@ 0x30
 8002042:	462b      	mov	r3, r5
 8002044:	460a      	mov	r2, r1
 8002046:	eb42 0303 	adc.w	r3, r2, r3
 800204a:	637b      	str	r3, [r7, #52]	@ 0x34
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002058:	4629      	mov	r1, r5
 800205a:	024b      	lsls	r3, r1, #9
 800205c:	4621      	mov	r1, r4
 800205e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002062:	4621      	mov	r1, r4
 8002064:	024a      	lsls	r2, r1, #9
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800206e:	2200      	movs	r2, #0
 8002070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002074:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002078:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800207c:	f7fe f8ca 	bl	8000214 <__aeabi_uldivmod>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4613      	mov	r3, r2
 8002086:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800208a:	e067      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208c:	4b75      	ldr	r3, [pc, #468]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x354>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	2200      	movs	r2, #0
 8002094:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002098:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800209c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020a6:	2300      	movs	r3, #0
 80020a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80020ae:	4622      	mov	r2, r4
 80020b0:	462b      	mov	r3, r5
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	0159      	lsls	r1, r3, #5
 80020bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c0:	0150      	lsls	r0, r2, #5
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4621      	mov	r1, r4
 80020c8:	1a51      	subs	r1, r2, r1
 80020ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80020cc:	4629      	mov	r1, r5
 80020ce:	eb63 0301 	sbc.w	r3, r3, r1
 80020d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80020e0:	4649      	mov	r1, r9
 80020e2:	018b      	lsls	r3, r1, #6
 80020e4:	4641      	mov	r1, r8
 80020e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ea:	4641      	mov	r1, r8
 80020ec:	018a      	lsls	r2, r1, #6
 80020ee:	4641      	mov	r1, r8
 80020f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80020f4:	4649      	mov	r1, r9
 80020f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002106:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800210a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800210e:	4692      	mov	sl, r2
 8002110:	469b      	mov	fp, r3
 8002112:	4623      	mov	r3, r4
 8002114:	eb1a 0303 	adds.w	r3, sl, r3
 8002118:	623b      	str	r3, [r7, #32]
 800211a:	462b      	mov	r3, r5
 800211c:	eb4b 0303 	adc.w	r3, fp, r3
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800212e:	4629      	mov	r1, r5
 8002130:	028b      	lsls	r3, r1, #10
 8002132:	4621      	mov	r1, r4
 8002134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002138:	4621      	mov	r1, r4
 800213a:	028a      	lsls	r2, r1, #10
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002144:	2200      	movs	r2, #0
 8002146:	673b      	str	r3, [r7, #112]	@ 0x70
 8002148:	677a      	str	r2, [r7, #116]	@ 0x74
 800214a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800214e:	f7fe f861 	bl	8000214 <__aeabi_uldivmod>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4613      	mov	r3, r2
 8002158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800215c:	4b41      	ldr	r3, [pc, #260]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x354>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	3301      	adds	r3, #1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800216e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800217e:	e0eb      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002180:	4b38      	ldr	r3, [pc, #224]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x354>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002188:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800218c:	4b35      	ldr	r3, [pc, #212]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x354>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d06b      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002198:	4b32      	ldr	r3, [pc, #200]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x354>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	2200      	movs	r2, #0
 80021a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80021ac:	2300      	movs	r3, #0
 80021ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80021b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021b4:	4622      	mov	r2, r4
 80021b6:	462b      	mov	r3, r5
 80021b8:	f04f 0000 	mov.w	r0, #0
 80021bc:	f04f 0100 	mov.w	r1, #0
 80021c0:	0159      	lsls	r1, r3, #5
 80021c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c6:	0150      	lsls	r0, r2, #5
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4621      	mov	r1, r4
 80021ce:	1a51      	subs	r1, r2, r1
 80021d0:	61b9      	str	r1, [r7, #24]
 80021d2:	4629      	mov	r1, r5
 80021d4:	eb63 0301 	sbc.w	r3, r3, r1
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80021e6:	4659      	mov	r1, fp
 80021e8:	018b      	lsls	r3, r1, #6
 80021ea:	4651      	mov	r1, sl
 80021ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021f0:	4651      	mov	r1, sl
 80021f2:	018a      	lsls	r2, r1, #6
 80021f4:	4651      	mov	r1, sl
 80021f6:	ebb2 0801 	subs.w	r8, r2, r1
 80021fa:	4659      	mov	r1, fp
 80021fc:	eb63 0901 	sbc.w	r9, r3, r1
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800220c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002210:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002214:	4690      	mov	r8, r2
 8002216:	4699      	mov	r9, r3
 8002218:	4623      	mov	r3, r4
 800221a:	eb18 0303 	adds.w	r3, r8, r3
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	462b      	mov	r3, r5
 8002222:	eb49 0303 	adc.w	r3, r9, r3
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002234:	4629      	mov	r1, r5
 8002236:	024b      	lsls	r3, r1, #9
 8002238:	4621      	mov	r1, r4
 800223a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800223e:	4621      	mov	r1, r4
 8002240:	024a      	lsls	r2, r1, #9
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800224a:	2200      	movs	r2, #0
 800224c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800224e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002250:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002254:	f7fd ffde 	bl	8000214 <__aeabi_uldivmod>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4613      	mov	r3, r2
 800225e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002262:	e065      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x420>
 8002264:	40023800 	.word	0x40023800
 8002268:	00f42400 	.word	0x00f42400
 800226c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002270:	4b3d      	ldr	r3, [pc, #244]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x458>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	099b      	lsrs	r3, r3, #6
 8002276:	2200      	movs	r2, #0
 8002278:	4618      	mov	r0, r3
 800227a:	4611      	mov	r1, r2
 800227c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002280:	653b      	str	r3, [r7, #80]	@ 0x50
 8002282:	2300      	movs	r3, #0
 8002284:	657b      	str	r3, [r7, #84]	@ 0x54
 8002286:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800228a:	4642      	mov	r2, r8
 800228c:	464b      	mov	r3, r9
 800228e:	f04f 0000 	mov.w	r0, #0
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	0159      	lsls	r1, r3, #5
 8002298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800229c:	0150      	lsls	r0, r2, #5
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4641      	mov	r1, r8
 80022a4:	1a51      	subs	r1, r2, r1
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	4649      	mov	r1, r9
 80022aa:	eb63 0301 	sbc.w	r3, r3, r1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022bc:	4659      	mov	r1, fp
 80022be:	018b      	lsls	r3, r1, #6
 80022c0:	4651      	mov	r1, sl
 80022c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022c6:	4651      	mov	r1, sl
 80022c8:	018a      	lsls	r2, r1, #6
 80022ca:	4651      	mov	r1, sl
 80022cc:	1a54      	subs	r4, r2, r1
 80022ce:	4659      	mov	r1, fp
 80022d0:	eb63 0501 	sbc.w	r5, r3, r1
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	00eb      	lsls	r3, r5, #3
 80022de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e2:	00e2      	lsls	r2, r4, #3
 80022e4:	4614      	mov	r4, r2
 80022e6:	461d      	mov	r5, r3
 80022e8:	4643      	mov	r3, r8
 80022ea:	18e3      	adds	r3, r4, r3
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	464b      	mov	r3, r9
 80022f0:	eb45 0303 	adc.w	r3, r5, r3
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002302:	4629      	mov	r1, r5
 8002304:	028b      	lsls	r3, r1, #10
 8002306:	4621      	mov	r1, r4
 8002308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800230c:	4621      	mov	r1, r4
 800230e:	028a      	lsls	r2, r1, #10
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002318:	2200      	movs	r2, #0
 800231a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800231c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800231e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002322:	f7fd ff77 	bl	8000214 <__aeabi_uldivmod>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4613      	mov	r3, r2
 800232c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002330:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x458>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	0f1b      	lsrs	r3, r3, #28
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800233e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002346:	fbb2 f3f3 	udiv	r3, r2, r3
 800234a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800234e:	e003      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002356:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800235c:	4618      	mov	r0, r3
 800235e:	37b8      	adds	r7, #184	@ 0xb8
 8002360:	46bd      	mov	sp, r7
 8002362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	00f42400 	.word	0x00f42400

08002370 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e28d      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8083 	beq.w	8002496 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002390:	4b94      	ldr	r3, [pc, #592]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b04      	cmp	r3, #4
 800239a:	d019      	beq.n	80023d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800239c:	4b91      	ldr	r3, [pc, #580]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023a8:	4b8e      	ldr	r3, [pc, #568]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023b4:	d00c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4b8b      	ldr	r3, [pc, #556]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d112      	bne.n	80023e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b88      	ldr	r3, [pc, #544]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	4b84      	ldr	r3, [pc, #528]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d05b      	beq.n	8002494 <HAL_RCC_OscConfig+0x124>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d157      	bne.n	8002494 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e25a      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x90>
 80023f2:	4b7c      	ldr	r3, [pc, #496]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7b      	ldr	r2, [pc, #492]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e01d      	b.n	800243c <HAL_RCC_OscConfig+0xcc>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0xb4>
 800240a:	4b76      	ldr	r3, [pc, #472]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a75      	ldr	r2, [pc, #468]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b73      	ldr	r3, [pc, #460]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a72      	ldr	r2, [pc, #456]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0xcc>
 8002424:	4b6f      	ldr	r3, [pc, #444]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a6e      	ldr	r2, [pc, #440]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b6c      	ldr	r3, [pc, #432]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6b      	ldr	r2, [pc, #428]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fcce 	bl	8000de4 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe fcca 	bl	8000de4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	@ 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e21f      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b61      	ldr	r3, [pc, #388]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0xdc>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe fcba 	bl	8000de4 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe fcb6 	bl	8000de4 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	@ 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e20b      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	4b57      	ldr	r3, [pc, #348]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x104>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d06f      	beq.n	8002582 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024a2:	4b50      	ldr	r3, [pc, #320]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d017      	beq.n	80024de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ae:	4b4d      	ldr	r3, [pc, #308]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d105      	bne.n	80024c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ba:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c6:	4b47      	ldr	r3, [pc, #284]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d11c      	bne.n	800250c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d2:	4b44      	ldr	r3, [pc, #272]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d116      	bne.n	800250c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	4b41      	ldr	r3, [pc, #260]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x186>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1d3      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b3b      	ldr	r3, [pc, #236]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4937      	ldr	r1, [pc, #220]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	e03a      	b.n	8002582 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002514:	4b34      	ldr	r3, [pc, #208]	@ (80025e8 <HAL_RCC_OscConfig+0x278>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe fc63 	bl	8000de4 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002522:	f7fe fc5f 	bl	8000de4 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1b4      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b28      	ldr	r3, [pc, #160]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4925      	ldr	r1, [pc, #148]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002556:	4b24      	ldr	r3, [pc, #144]	@ (80025e8 <HAL_RCC_OscConfig+0x278>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fc42 	bl	8000de4 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe fc3e 	bl	8000de4 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e193      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b1b      	ldr	r3, [pc, #108]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d036      	beq.n	80025fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <HAL_RCC_OscConfig+0x27c>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe fc22 	bl	8000de4 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a4:	f7fe fc1e 	bl	8000de4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e173      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <HAL_RCC_OscConfig+0x274>)
 80025b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x234>
 80025c2:	e01b      	b.n	80025fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c4:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <HAL_RCC_OscConfig+0x27c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7fe fc0b 	bl	8000de4 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	e00e      	b.n	80025f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d2:	f7fe fc07 	bl	8000de4 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d907      	bls.n	80025f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e15c      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f0:	4b8a      	ldr	r3, [pc, #552]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 80025f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ea      	bne.n	80025d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8097 	beq.w	8002738 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260e:	4b83      	ldr	r3, [pc, #524]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	4b7f      	ldr	r3, [pc, #508]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	4a7e      	ldr	r2, [pc, #504]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
 800262a:	4b7c      	ldr	r3, [pc, #496]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b79      	ldr	r3, [pc, #484]	@ (8002820 <HAL_RCC_OscConfig+0x4b0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d118      	bne.n	8002678 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002646:	4b76      	ldr	r3, [pc, #472]	@ (8002820 <HAL_RCC_OscConfig+0x4b0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a75      	ldr	r2, [pc, #468]	@ (8002820 <HAL_RCC_OscConfig+0x4b0>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002652:	f7fe fbc7 	bl	8000de4 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7fe fbc3 	bl	8000de4 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e118      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	4b6c      	ldr	r3, [pc, #432]	@ (8002820 <HAL_RCC_OscConfig+0x4b0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x31e>
 8002680:	4b66      	ldr	r3, [pc, #408]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002684:	4a65      	ldr	r2, [pc, #404]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6713      	str	r3, [r2, #112]	@ 0x70
 800268c:	e01c      	b.n	80026c8 <HAL_RCC_OscConfig+0x358>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b05      	cmp	r3, #5
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x340>
 8002696:	4b61      	ldr	r3, [pc, #388]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269a:	4a60      	ldr	r2, [pc, #384]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a2:	4b5e      	ldr	r3, [pc, #376]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a6:	4a5d      	ldr	r2, [pc, #372]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0x358>
 80026b0:	4b5a      	ldr	r3, [pc, #360]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b4:	4a59      	ldr	r2, [pc, #356]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80026bc:	4b57      	ldr	r3, [pc, #348]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c0:	4a56      	ldr	r2, [pc, #344]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 80026c2:	f023 0304 	bic.w	r3, r3, #4
 80026c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7fe fb88 	bl	8000de4 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe fb84 	bl	8000de4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0d7      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	4b4b      	ldr	r3, [pc, #300]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ee      	beq.n	80026d8 <HAL_RCC_OscConfig+0x368>
 80026fa:	e014      	b.n	8002726 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fb72 	bl	8000de4 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe fb6e 	bl	8000de4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0c1      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271a:	4b40      	ldr	r3, [pc, #256]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ee      	bne.n	8002704 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	4a3a      	ldr	r2, [pc, #232]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002736:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80ad 	beq.w	800289c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002742:	4b36      	ldr	r3, [pc, #216]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b08      	cmp	r3, #8
 800274c:	d060      	beq.n	8002810 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d145      	bne.n	80027e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b33      	ldr	r3, [pc, #204]	@ (8002824 <HAL_RCC_OscConfig+0x4b4>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fb42 	bl	8000de4 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fb3e 	bl	8000de4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e093      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	4b29      	ldr	r3, [pc, #164]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	019b      	lsls	r3, r3, #6
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	3b01      	subs	r3, #1
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	071b      	lsls	r3, r3, #28
 80027ae:	491b      	ldr	r1, [pc, #108]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_RCC_OscConfig+0x4b4>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fb13 	bl	8000de4 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe fb0f 	bl	8000de4 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e064      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d4:	4b11      	ldr	r3, [pc, #68]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x452>
 80027e0:	e05c      	b.n	800289c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <HAL_RCC_OscConfig+0x4b4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fafc 	bl	8000de4 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe faf8 	bl	8000de4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e04d      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_RCC_OscConfig+0x4ac>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x480>
 800280e:	e045      	b.n	800289c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d107      	bne.n	8002828 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e040      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
 800281c:	40023800 	.word	0x40023800
 8002820:	40007000 	.word	0x40007000
 8002824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002828:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <HAL_RCC_OscConfig+0x538>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d030      	beq.n	8002898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d129      	bne.n	8002898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d122      	bne.n	8002898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002858:	4013      	ands	r3, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800285e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002860:	4293      	cmp	r3, r2
 8002862:	d119      	bne.n	8002898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	3b01      	subs	r3, #1
 8002872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d10f      	bne.n	8002898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e042      	b.n	8002944 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe f96c 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	@ 0x24
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f82b 	bl	800294c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800294c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002950:	b0c0      	sub	sp, #256	@ 0x100
 8002952:	af00      	add	r7, sp, #0
 8002954:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002968:	68d9      	ldr	r1, [r3, #12]
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	ea40 0301 	orr.w	r3, r0, r1
 8002974:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	431a      	orrs	r2, r3
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	431a      	orrs	r2, r3
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029a4:	f021 010c 	bic.w	r1, r1, #12
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029b2:	430b      	orrs	r3, r1
 80029b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c6:	6999      	ldr	r1, [r3, #24]
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	ea40 0301 	orr.w	r3, r0, r1
 80029d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b8f      	ldr	r3, [pc, #572]	@ (8002c18 <UART_SetConfig+0x2cc>)
 80029dc:	429a      	cmp	r2, r3
 80029de:	d005      	beq.n	80029ec <UART_SetConfig+0xa0>
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b8d      	ldr	r3, [pc, #564]	@ (8002c1c <UART_SetConfig+0x2d0>)
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d104      	bne.n	80029f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029ec:	f7ff fa7c 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 80029f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029f4:	e003      	b.n	80029fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029f6:	f7ff fa63 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 80029fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a08:	f040 810c 	bne.w	8002c24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a10:	2200      	movs	r2, #0
 8002a12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a1e:	4622      	mov	r2, r4
 8002a20:	462b      	mov	r3, r5
 8002a22:	1891      	adds	r1, r2, r2
 8002a24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a26:	415b      	adcs	r3, r3
 8002a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a2e:	4621      	mov	r1, r4
 8002a30:	eb12 0801 	adds.w	r8, r2, r1
 8002a34:	4629      	mov	r1, r5
 8002a36:	eb43 0901 	adc.w	r9, r3, r1
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4699      	mov	r9, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	eb18 0303 	adds.w	r3, r8, r3
 8002a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a5c:	462b      	mov	r3, r5
 8002a5e:	eb49 0303 	adc.w	r3, r9, r3
 8002a62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	18db      	adds	r3, r3, r3
 8002a7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a80:	4613      	mov	r3, r2
 8002a82:	eb42 0303 	adc.w	r3, r2, r3
 8002a86:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a90:	f7fd fbc0 	bl	8000214 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4b61      	ldr	r3, [pc, #388]	@ (8002c20 <UART_SetConfig+0x2d4>)
 8002a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	011c      	lsls	r4, r3, #4
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002aac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ab0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	1891      	adds	r1, r2, r2
 8002aba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002abc:	415b      	adcs	r3, r3
 8002abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	eb12 0a01 	adds.w	sl, r2, r1
 8002aca:	4649      	mov	r1, r9
 8002acc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002adc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ae4:	4692      	mov	sl, r2
 8002ae6:	469b      	mov	fp, r3
 8002ae8:	4643      	mov	r3, r8
 8002aea:	eb1a 0303 	adds.w	r3, sl, r3
 8002aee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002af2:	464b      	mov	r3, r9
 8002af4:	eb4b 0303 	adc.w	r3, fp, r3
 8002af8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b10:	460b      	mov	r3, r1
 8002b12:	18db      	adds	r3, r3, r3
 8002b14:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b16:	4613      	mov	r3, r2
 8002b18:	eb42 0303 	adc.w	r3, r2, r3
 8002b1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b26:	f7fd fb75 	bl	8000214 <__aeabi_uldivmod>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4b3b      	ldr	r3, [pc, #236]	@ (8002c20 <UART_SetConfig+0x2d4>)
 8002b32:	fba3 2301 	umull	r2, r3, r3, r1
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2264      	movs	r2, #100	@ 0x64
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	1acb      	subs	r3, r1, r3
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b46:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <UART_SetConfig+0x2d4>)
 8002b48:	fba3 2302 	umull	r2, r3, r3, r2
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b54:	441c      	add	r4, r3
 8002b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b68:	4642      	mov	r2, r8
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	1891      	adds	r1, r2, r2
 8002b6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b70:	415b      	adcs	r3, r3
 8002b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b78:	4641      	mov	r1, r8
 8002b7a:	1851      	adds	r1, r2, r1
 8002b7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b7e:	4649      	mov	r1, r9
 8002b80:	414b      	adcs	r3, r1
 8002b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b90:	4659      	mov	r1, fp
 8002b92:	00cb      	lsls	r3, r1, #3
 8002b94:	4651      	mov	r1, sl
 8002b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	00ca      	lsls	r2, r1, #3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4642      	mov	r2, r8
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bac:	464b      	mov	r3, r9
 8002bae:	460a      	mov	r2, r1
 8002bb0:	eb42 0303 	adc.w	r3, r2, r3
 8002bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bc4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002bc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bcc:	460b      	mov	r3, r1
 8002bce:	18db      	adds	r3, r3, r3
 8002bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	eb42 0303 	adc.w	r3, r2, r3
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bde:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002be2:	f7fd fb17 	bl	8000214 <__aeabi_uldivmod>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4b0d      	ldr	r3, [pc, #52]	@ (8002c20 <UART_SetConfig+0x2d4>)
 8002bec:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	2164      	movs	r1, #100	@ 0x64
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	3332      	adds	r3, #50	@ 0x32
 8002bfe:	4a08      	ldr	r2, [pc, #32]	@ (8002c20 <UART_SetConfig+0x2d4>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	f003 0207 	and.w	r2, r3, #7
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4422      	add	r2, r4
 8002c12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c14:	e106      	b.n	8002e24 <UART_SetConfig+0x4d8>
 8002c16:	bf00      	nop
 8002c18:	40011000 	.word	0x40011000
 8002c1c:	40011400 	.word	0x40011400
 8002c20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c36:	4642      	mov	r2, r8
 8002c38:	464b      	mov	r3, r9
 8002c3a:	1891      	adds	r1, r2, r2
 8002c3c:	6239      	str	r1, [r7, #32]
 8002c3e:	415b      	adcs	r3, r3
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c46:	4641      	mov	r1, r8
 8002c48:	1854      	adds	r4, r2, r1
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	eb43 0501 	adc.w	r5, r3, r1
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	00eb      	lsls	r3, r5, #3
 8002c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5e:	00e2      	lsls	r2, r4, #3
 8002c60:	4614      	mov	r4, r2
 8002c62:	461d      	mov	r5, r3
 8002c64:	4643      	mov	r3, r8
 8002c66:	18e3      	adds	r3, r4, r3
 8002c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c6c:	464b      	mov	r3, r9
 8002c6e:	eb45 0303 	adc.w	r3, r5, r3
 8002c72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c92:	4629      	mov	r1, r5
 8002c94:	008b      	lsls	r3, r1, #2
 8002c96:	4621      	mov	r1, r4
 8002c98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	008a      	lsls	r2, r1, #2
 8002ca0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ca4:	f7fd fab6 	bl	8000214 <__aeabi_uldivmod>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4b60      	ldr	r3, [pc, #384]	@ (8002e30 <UART_SetConfig+0x4e4>)
 8002cae:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	011c      	lsls	r4, r3, #4
 8002cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002cc8:	4642      	mov	r2, r8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	1891      	adds	r1, r2, r2
 8002cce:	61b9      	str	r1, [r7, #24]
 8002cd0:	415b      	adcs	r3, r3
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd8:	4641      	mov	r1, r8
 8002cda:	1851      	adds	r1, r2, r1
 8002cdc:	6139      	str	r1, [r7, #16]
 8002cde:	4649      	mov	r1, r9
 8002ce0:	414b      	adcs	r3, r1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	00cb      	lsls	r3, r1, #3
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	00ca      	lsls	r2, r1, #3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	4642      	mov	r2, r8
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d0c:	464b      	mov	r3, r9
 8002d0e:	460a      	mov	r2, r1
 8002d10:	eb42 0303 	adc.w	r3, r2, r3
 8002d14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d30:	4649      	mov	r1, r9
 8002d32:	008b      	lsls	r3, r1, #2
 8002d34:	4641      	mov	r1, r8
 8002d36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	008a      	lsls	r2, r1, #2
 8002d3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d42:	f7fd fa67 	bl	8000214 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4b38      	ldr	r3, [pc, #224]	@ (8002e30 <UART_SetConfig+0x4e4>)
 8002d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2264      	movs	r2, #100	@ 0x64
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	1acb      	subs	r3, r1, r3
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	3332      	adds	r3, #50	@ 0x32
 8002d60:	4a33      	ldr	r2, [pc, #204]	@ (8002e30 <UART_SetConfig+0x4e4>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d6c:	441c      	add	r4, r3
 8002d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d72:	2200      	movs	r2, #0
 8002d74:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d76:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	464b      	mov	r3, r9
 8002d80:	1891      	adds	r1, r2, r2
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	415b      	adcs	r3, r3
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	1851      	adds	r1, r2, r1
 8002d90:	6039      	str	r1, [r7, #0]
 8002d92:	4649      	mov	r1, r9
 8002d94:	414b      	adcs	r3, r1
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002da4:	4659      	mov	r1, fp
 8002da6:	00cb      	lsls	r3, r1, #3
 8002da8:	4651      	mov	r1, sl
 8002daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dae:	4651      	mov	r1, sl
 8002db0:	00ca      	lsls	r2, r1, #3
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	4642      	mov	r2, r8
 8002dba:	189b      	adds	r3, r3, r2
 8002dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	eb42 0303 	adc.w	r3, r2, r3
 8002dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002de0:	4649      	mov	r1, r9
 8002de2:	008b      	lsls	r3, r1, #2
 8002de4:	4641      	mov	r1, r8
 8002de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dea:	4641      	mov	r1, r8
 8002dec:	008a      	lsls	r2, r1, #2
 8002dee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002df2:	f7fd fa0f 	bl	8000214 <__aeabi_uldivmod>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <UART_SetConfig+0x4e4>)
 8002dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	2164      	movs	r1, #100	@ 0x64
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	3332      	adds	r3, #50	@ 0x32
 8002e0e:	4a08      	ldr	r2, [pc, #32]	@ (8002e30 <UART_SetConfig+0x4e4>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	f003 020f 	and.w	r2, r3, #15
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4422      	add	r2, r4
 8002e22:	609a      	str	r2, [r3, #8]
}
 8002e24:	bf00      	nop
 8002e26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e30:	51eb851f 	.word	0x51eb851f

08002e34 <memset>:
 8002e34:	4402      	add	r2, r0
 8002e36:	4603      	mov	r3, r0
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <memset+0xa>
 8002e3c:	4770      	bx	lr
 8002e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e42:	e7f9      	b.n	8002e38 <memset+0x4>

08002e44 <__libc_init_array>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4d0d      	ldr	r5, [pc, #52]	@ (8002e7c <__libc_init_array+0x38>)
 8002e48:	4c0d      	ldr	r4, [pc, #52]	@ (8002e80 <__libc_init_array+0x3c>)
 8002e4a:	1b64      	subs	r4, r4, r5
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	2600      	movs	r6, #0
 8002e50:	42a6      	cmp	r6, r4
 8002e52:	d109      	bne.n	8002e68 <__libc_init_array+0x24>
 8002e54:	4d0b      	ldr	r5, [pc, #44]	@ (8002e84 <__libc_init_array+0x40>)
 8002e56:	4c0c      	ldr	r4, [pc, #48]	@ (8002e88 <__libc_init_array+0x44>)
 8002e58:	f000 f818 	bl	8002e8c <_init>
 8002e5c:	1b64      	subs	r4, r4, r5
 8002e5e:	10a4      	asrs	r4, r4, #2
 8002e60:	2600      	movs	r6, #0
 8002e62:	42a6      	cmp	r6, r4
 8002e64:	d105      	bne.n	8002e72 <__libc_init_array+0x2e>
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
 8002e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6c:	4798      	blx	r3
 8002e6e:	3601      	adds	r6, #1
 8002e70:	e7ee      	b.n	8002e50 <__libc_init_array+0xc>
 8002e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e76:	4798      	blx	r3
 8002e78:	3601      	adds	r6, #1
 8002e7a:	e7f2      	b.n	8002e62 <__libc_init_array+0x1e>
 8002e7c:	08002ec4 	.word	0x08002ec4
 8002e80:	08002ec4 	.word	0x08002ec4
 8002e84:	08002ec4 	.word	0x08002ec4
 8002e88:	08002ec8 	.word	0x08002ec8

08002e8c <_init>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr

08002e98 <_fini>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr
